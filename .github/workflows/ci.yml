name: ci

on:
  schedule:
    - cron: '*/5 * * * *'
  push:
    branches:
      - main
    paths:
      - Dockerfile
      - 'src/**'
      - '.github/workflows/ci.yml'
  workflow_dispatch:

env:
  SOURCE_REPO: privau/searxng-favicon
  SOURCE_REPO_BRANCH: latest
  BASE_TEST_TAG: vojkovic/searxng:base-test
  BASE_PROD_TAG: vojkovic/searxng:base
  BASE_GITHUB_PROD_TAG: ghcr.io/privau/searxng:base
  MAIN_TEST_TAG: vojkovic/searxng:production-test
  MAIN_PROD_TAG: vojkovic/searxng:production
  MAIN_GITHUB_PROD_TAG: ghcr.io/privau/searxng:production

jobs:
  check-update-required:
    runs-on: ubuntu-latest
    outputs:
      is-up-to-date: ${{ steps.check-for-changes.outputs.is-up-to-date }}
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Check for remote changes
      id: check-for-changes
      run: |
        if [ "${{ github.event_name }}" != "schedule" ]; then
          echo "This run was triggered by ${GITHUB_EVENT_NAME}. Skipping the job."
          echo "::set-output name=is-up-to-date::false"
          exit 0
        fi
        REMOTE_COMMIT=$(git ls-remote https://github.com/${{ env.SOURCE_REPO }} ${{ env.SOURCE_REPO_BRANCH }} | awk '{print $1}')
        LOCAL_COMMIT=$(grep -m1 "UPSTREAM_COMMIT=" Dockerfile | cut -d'=' -f2)
        echo "Remote commit: $REMOTE_COMMIT"
        echo "Local commit: $LOCAL_COMMIT"
        if [ "$REMOTE_COMMIT" = "$LOCAL_COMMIT" ]; then
          echo "Repository is up to date. Skipping build process."
          echo "::set-output name=is-up-to-date::true"
        else
          echo "Repository is not up to date."
          echo "::set-output name=is-up-to-date::false"
        fi

  update:
    needs: check-update-required
    if: needs.check-update-required.outputs.is-up-to-date == 'false'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Update the SHA sum.
      run: |
        REMOTE_COMMIT=$(git ls-remote https://github.com/${{ env.SOURCE_REPO }} ${{ env.SOURCE_REPO_BRANCH }} | awk '{print $1}')
        sed -i "/^UPSTREAM_COMMIT=/c\UPSTREAM_COMMIT=${REMOTE_COMMIT}" Dockerfile


    - name: Push changes
      uses: actions-js/push@master
      with:
        author_name: 'github-actions[bot]'
        author_email: '41898282+github-actions[bot]@users.noreply.github.com'
        message: '[feat] Update SearXNG to Latest'
        github_token: ${{ secrets.PAT_TOKEN }}

    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0
        ref: base

    - name: Copy requirements.txt
      run: |
        git checkout base
        curl -v -fsSL https://raw.githubusercontent.com/${{ env.SOURCE_REPO }}/${{ env.SOURCE_REPO_BRANCH }}/requirements.txt -o requirements.txt
        git add requirements.txt

    - name: Push changes
      uses: actions-js/push@master
      with:
        author_name: 'github-actions[bot]'
        author_email: '41898282+github-actions[bot]@users.noreply.github.com'
        message: '[feat] Update requirements.txt to Latest'
        branch: 'base'
        github_token: ${{ secrets.PAT_TOKEN }}

  build-base:
    needs: update
    if: needs.check-update-required.outputs.is-up-to-date == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: vojkovic
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Out Repo
        uses: actions/checkout@v4
        with:
          ref: base

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Test Base Image
        uses: docker/build-push-action@v6
        with:
          load: true
          context: ./
          file: ./Dockerfile
          tags: ${{ env.BASE_TEST_TAG }}

      - name: Test Base Image
        run: docker run --rm ${{ env.BASE_TEST_TAG }} /bin/sh -c "echo 'Hello World'"

      - name: Build Production Base Image
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.BASE_PROD_TAG }}
            ${{ env.BASE_GITHUB_PROD_TAG }}

  build-main:
    needs: build-base
    if: needs.check-update-required.outputs.is-up-to-date == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: vojkovic
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Out Repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Test Main Image
        uses: docker/build-push-action@v6
        with:
          load: true
          context: ./
          file: ./Dockerfile
          tags: ${{ env.MAIN_TEST_TAG }}

      - name: Test Main Image
        run: |
          docker run -d -p 8080:8080 ${{ env.MAIN_TEST_TAG }}
          sleep 5 # Give the container some time to start
          curl http://localhost:8080/healthz > input.txt
          cat input.txt
          grep "OK" input.txt
          curl http://localhost:8080/search?q=github > input.txt
          cat input.txt
          grep "data-copied-text" input.txt
          docker rm -f $(docker ps -q --filter ancestor=${{ env.MAIN_TEST_TAG }}) # Stop the container

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.MAIN_PROD_TAG }}
            ${{ env.MAIN_GITHUB_PROD_TAG }}
